
// Importamos base de datos, jwt y bcrypt
import db from '../config/db.js';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';

/**
 * 游댏 LOGIN
 * Iniciar sesi칩n y generar token JWT si el correo y contrase침a coinciden
 */
export const login = async (req, res) => {
  console.log('游릭 Petici칩n recibida en /login');
  console.log('游닐 Datos:', req.body);

  const { email, contrase침a } = req.body;

  try {
    const [filas] = await db.query('SELECT * FROM Usuarios WHERE Email = ?', [email]);

    if (filas.length === 0) {
      return res.status(404).json({ mensaje: 'Usuario no encontrado' });
    }

    const usuario = filas[0];

    console.log("Contrase침a recibida:", contrase침a);
    console.log("Contrase침a en la base:", usuario.Contrase침a);

    const contrase침aValida = await bcrypt.compare(contrase침a, usuario.Contrase침a);

    if (!contrase침aValida) {
      return res.status(401).json({ mensaje: 'Contrase침a incorrecta' });
    }

    const token = jwt.sign(
      {
        id: usuario.ID_Usuario,
        nombre: usuario.Nombre_Usuario,
        rol: usuario.ID_Rol
      },
      process.env.JWT_SECRET,
      { expiresIn: '2h' }
    );

    res.json({
      mensaje: 'Login exitoso',
      token
    });

  } catch (error) {
    res.status(500).json({ mensaje: 'Error en el servidor', error });
  }
};


/**
 * 游닇 REGISTRO DE USUARIO NUEVO (Listo para activar desde el frontend)
 * 丘멆잺 Actualmente deshabilitado, pendiente de conectar desde el frontend
 */
// export const registrarUsuario = async (req, res) => {
//   const { nombre, email, rol, contrase침a } = req.body;

//   if (!nombre || !email || !rol || !contrase침a) {
//     return res.status(400).json({ mensaje: 'Todos los campos son obligatorios.' });
//   }

//   try {
//     const [usuariosExistentes] = await db.query('SELECT * FROM Usuarios WHERE Email = ?', [email]);
//     if (usuariosExistentes.length > 0) {
//       return res.status(409).json({ mensaje: 'El correo ya est치 registrado.' });
//     }

//     const contrase침aEncriptada = await bcrypt.hash(contrase침a, 10);

//     const sql = `
//       INSERT INTO Usuarios (Nombre_Usuario, Email, ID_Rol, Contrase침a)
//       VALUES (?, ?, ?, ?)
//     `;
//     const [resultado] = await db.query(sql, [nombre, email, rol, contrase침aEncriptada]);

//     res.status(201).json({ mensaje: 'Usuario registrado exitosamente', id: resultado.insertId });
//   } catch (error) {
//     console.error('Error al registrar usuario:', error);
//     res.status(500).json({ mensaje: 'Error interno al registrar usuario' });
//   }
// };


/**
 * 游대 RECUPERACI칍N DE CONTRASE칌A (Listo para activar desde el frontend)
 * 丘멆잺 Desactivado por ahora hasta que el formulario est칠 listo
 */
// export const recuperarContrase침a = async (req, res) => {
//   const { email, nuevaContrase침a } = req.body;

//   if (!email || !nuevaContrase침a) {
//     return res.status(400).json({ mensaje: 'Email y nueva contrase침a son obligatorios.' });
//   }

//   try {
//     const [usuarios] = await db.query('SELECT * FROM Usuarios WHERE Email = ?', [email]);
//     if (usuarios.length === 0) {
//       return res.status(404).json({ mensaje: 'Correo no registrado.' });
//     }

//     const nuevaHash = await bcrypt.hash(nuevaContrase침a, 10);
//     await db.query('UPDATE Usuarios SET Contrase침a = ? WHERE Email = ?', [nuevaHash, email]);

//     res.json({ mensaje: 'Contrase침a actualizada exitosamente.' });
//   } catch (error) {
//     console.error('Error al recuperar contrase침a:', error);
//     res.status(500).json({ mensaje: 'Error interno al cambiar la contrase침a.' });
//   }
// };
